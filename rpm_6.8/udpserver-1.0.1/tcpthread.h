
#pragma once

#include "global.h"
#include "thread.h"

class CTCPClient;
typedef map<int, CTCPClient*>   GM_MapConn;   // connfd   => CTCPClient*
typedef map<string, string>     GM_MapJson;   // key      => value => JSON map object...

enum {
  kClientPHP     = 1,       // 网站端链接...
  kClientStudent = 2,       // 学生端链接...
  kClientTeacher = 3,       // 讲师端链接...
};

// define the command header...
typedef struct {
  int   m_pkg_len;    // body size...
  int   m_type;       // client type...
  int   m_cmd;        // command id...
  int   m_sock;       // php sock in transmit...
} Cmd_Header;

///////////////////////////////////////////////////////////
// Only for transmit server...
//////////////////////////////////////////////////////////
typedef struct {
	char  pkg_len[8];  // body length, not including header
	char  cmd;         // command code
	char  status;      // status code for response
} TrackerHeader;

class CTCPThread : public CThread
{
public:
  CTCPThread();
  virtual ~CTCPThread();
  virtual void Entry();
public:
  int     GetEpollFD() { return m_epoll_fd; }
  bool    InitThread();                     // 初始化并启动线程...
private:
  int     doCreateSocket(int nHostPort);    // 创建TCP监听套接字...
  int     SetNonBlocking(int sockfd);
  int     doHandleWrite(int connfd);
  int     doHandleRead(int connfd);
  void    doHandleTimeout();
  void    clearAllClient();
private:
  int                 m_epoll_fd;           // epoll句柄编号...
  int                 m_listen_fd;          // TCP监听套接字...
  GM_MapConn	        m_MapConnect;         // the global map object...
  pthread_mutex_t     m_mutex;              // 线程互斥对象...
  struct epoll_event  m_events[MAX_EPOLL_SIZE]; // epoll事件队列...
};

class CTCPClient
{
public:
  CTCPClient(CTCPThread * lpTCPThread, int connfd, int nSinPort, string & strSinAddr);
  ~CTCPClient();
public:
  int       ForRead();            // 读取网络数据
  int       ForWrite();           // 发送网络数据
  bool      IsTimeout();          // 检测是否超时
  void      ResetTimeout();       // 重置超时时间
  int       parseJsonData(const char * lpJsonPtr, int nJsonLength);          // 统一的JSON解析接口...
private:
  int          m_epoll_fd;         // epoll句柄编号...
  int          m_nConnFD;          // 连接socket...
  int          m_nSinPort;         // 连接端口...
  int          m_nClientType;      // 客户端类型...
  time_t       m_nStartTime;       // 超时检测起点...
  string       m_strSinAddr;       // 连接IP地址...
  string       m_strSend;          // 数据发送缓存...
  string       m_strRecv;          // 数据读取缓存...
  GM_MapJson   m_MapJson;          // 终端传递过来的JSON数据...
  CTCPThread * m_lpTCPThread;      // TCP线程对象...
  
  friend class CTCPThread;
};